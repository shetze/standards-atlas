From 64b20085898857827e51b780343920ce339a44b9 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Florian=20W=C3=BChr?= <fwuehr@redhat.com>
Date: Mon, 16 Jun 2025 13:36:36 +0200
Subject: [PATCH] Add modifications to doorstop

---
 core/item.py                | 16 ++++++++----
 core/publishers/markdown.py | 12 +++++++--
 core/reference_finder.py    | 50 +++++++++++++++++++++++++++++++++++++
 core/yaml_validator.py      |  4 +--
 4 files changed, 73 insertions(+), 9 deletions(-)

diff --git a/core/item.py b/core/item.py
index 4b978f5..9d0a86e 100644
--- a/core/item.py
+++ b/core/item.py
@@ -391,7 +391,7 @@ class Item(BaseFileObject):  # pylint: disable=R0902
                     continue
                 stripped_value = []
                 for el in value:
-                    ref_dict = {"path": el["path"].strip(), "type": "file"}  # type: ignore
+                    ref_dict = {"path": el["path"].strip(), "type": el["type"].strip()}  # type: ignore
 
                     if "keyword" in el:
                         ref_dict["keyword"] = el["keyword"]  # type: ignore
@@ -771,10 +771,16 @@ class Item(BaseFileObject):  # pylint: disable=R0902
             path = ref_item["path"]
             keyword = ref_item["keyword"] if "keyword" in ref_item else None
 
-            reference = self.reference_finder.find_file_reference(
-                path, self.root, self.tree, self.path, keyword
-            )
-            references.append(reference)
+            if ref_item["type"] == "pattern":
+                reference = self.reference_finder.find_pattern_reference(
+                    path, self.root, self.tree, self.path, keyword
+                )
+                references.extend(reference)
+            else:
+                reference = self.reference_finder.find_file_reference(
+                    path, self.root, self.tree, self.path, keyword
+                )
+                references.append(reference)
         return references
 
     def find_child_links(self, find_all=True):
diff --git a/core/publishers/markdown.py b/core/publishers/markdown.py
index 3642158..c34c11c 100644
--- a/core/publishers/markdown.py
+++ b/core/publishers/markdown.py
@@ -92,9 +92,12 @@ class MarkdownPublisher(BasePublisher):
         """Format an external reference in Markdown."""
         if settings.CHECK_REF:
             path, line = item.find_ref()
+            if path == '':
+                return ''
             path = path.replace("\\", "/")  # always use unix-style paths
             if line:
-                return "> `{p}` (line {line})".format(p=path, line=line)
+                #return "> `{p}` (line {line})".format(p=path, line=line)
+                return "> [{p}](`../{p}`) (line {line})".format(p=path, line=line)
             else:
                 return "> `{p}`".format(p=path)
         else:
@@ -106,11 +109,16 @@ class MarkdownPublisher(BasePublisher):
             references = item.find_references()
             text_refs = []
             for ref_item in references:
+                if not ref_item:
+                    continue
                 path, line = ref_item
+                if path == '':
+                    return ''
                 path = path.replace("\\", "/")  # always use unix-style paths
 
                 if line:
-                    text_refs.append("> `{p}` (line {line})".format(p=path, line=line))
+                    #text_refs.append("> `{p}` (line {line})".format(p=path, line=line))
+                    text_refs.append("> [{p}](../`{p}`) (line {line})\n".format(p=path, line=line))
                 else:
                     text_refs.append("> `{p}`".format(p=path))
 
diff --git a/core/reference_finder.py b/core/reference_finder.py
index 21b3f84..9ce8e4f 100644
--- a/core/reference_finder.py
+++ b/core/reference_finder.py
@@ -98,3 +98,53 @@ class ReferenceFinder:
 
         msg = "external reference not found: {}".format(ref_path)
         raise DoorstopError(msg)
+
+
+    @staticmethod
+    def find_pattern_reference(pattern, root, tree, item_path, keyword):
+        """Find an external reference based on a search regex pattern.
+        :raises: :class: when no
+            reference is found
+        :return: List of tuples [(ref_path1, line), (ref_path2, line), ... ]
+            when references are found
+        """
+
+        log.debug("searching for pattern '{}'...".format(pattern))
+
+        if keyword == None :
+            msg = "find_pattern_reference without keyword: {}".format(pattern)
+            raise DoorstopError(msg)
+
+        reflist = []
+
+        rex = re.compile(pattern)
+        for path, _filename, relpath in tree.vcs.paths:
+            # Skip the item's file while searching
+            if path == item_path:
+                continue
+            # if re.match(".*\.md", path):
+            log.debug("check ref in '{}'...".format(path))
+            if rex.match(path):
+                log.debug("got ref in '{}'...".format(path))
+
+                # Search for the reference in the file
+                try:
+                    lines = linecache.getlines(path)
+                except SyntaxError:
+                    log.trace("unable to read lines from: {}".format(path))  # type: ignore
+                    continue
+
+                log.debug("searching pattern for keyword '{}'...".format(re.escape(keyword)))
+                pattern = r"(\b|\W){}(\b|\W)".format(re.escape(keyword))
+                log.trace("regex: {}".format(pattern))  # type: ignore
+                regex = re.compile(pattern)
+                for lineno, line in enumerate(lines, start=1):
+                    if regex.search(line):
+                        log.debug("found ref: {}".format(relpath))
+                        reflist.append( (relpath, lineno) )
+
+        if reflist :
+            return reflist
+
+        log.debug("external pattern reference not found: {}".format(keyword))
+        return '', ''
diff --git a/core/yaml_validator.py b/core/yaml_validator.py
index 916f2ca..277a789 100644
--- a/core/yaml_validator.py
+++ b/core/yaml_validator.py
@@ -34,9 +34,9 @@ class YamlValidator:
                         )
 
                     ref_type = ref_dict["type"]
-                    if ref_type != "file":
+                    if ref_type != "file" and ref_type != "pattern":
                         raise AttributeError(
-                            "'references' member's 'type' value must be a 'file'"
+                            "'references' member's 'type' value must be a 'file' or 'pattern'"
                         )
 
                     ref_path = ref_dict["path"]
-- 
2.49.0

